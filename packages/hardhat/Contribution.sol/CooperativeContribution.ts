/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CooperativeContributionInterface extends utils.Interface {
  functions: {
    "contribute()": FunctionFragment;
    "memberBalances(address)": FunctionFragment;
    "monthlyContribution()": FunctionFragment;
    "nextContributionDue()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawExcess()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "contribute"
      | "memberBalances"
      | "monthlyContribution"
      | "nextContributionDue"
      | "owner"
      | "withdraw"
      | "withdrawExcess"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "monthlyContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextContributionDue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawExcess",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthlyContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextContributionDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcess",
    data: BytesLike
  ): Result;

  events: {
    "BusinessFunded(uint256)": EventFragment;
    "ContributionMade(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BusinessFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionMade"): EventFragment;
}

export interface BusinessFundedEventObject {
  amount: BigNumber;
}
export type BusinessFundedEvent = TypedEvent<
  [BigNumber],
  BusinessFundedEventObject
>;

export type BusinessFundedEventFilter = TypedEventFilter<BusinessFundedEvent>;

export interface ContributionMadeEventObject {
  contributor: string;
  amount: BigNumber;
}
export type ContributionMadeEvent = TypedEvent<
  [string, BigNumber],
  ContributionMadeEventObject
>;

export type ContributionMadeEventFilter =
  TypedEventFilter<ContributionMadeEvent>;

export interface CooperativeContribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CooperativeContributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    monthlyContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextContributionDue(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawExcess(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  contribute(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  monthlyContribution(overrides?: CallOverrides): Promise<BigNumber>;

  nextContributionDue(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawExcess(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contribute(overrides?: CallOverrides): Promise<void>;

    memberBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthlyContribution(overrides?: CallOverrides): Promise<BigNumber>;

    nextContributionDue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawExcess(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BusinessFunded(uint256)"(amount?: null): BusinessFundedEventFilter;
    BusinessFunded(amount?: null): BusinessFundedEventFilter;

    "ContributionMade(address,uint256)"(
      contributor?: PromiseOrValue<string> | null,
      amount?: null
    ): ContributionMadeEventFilter;
    ContributionMade(
      contributor?: PromiseOrValue<string> | null,
      amount?: null
    ): ContributionMadeEventFilter;
  };

  estimateGas: {
    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthlyContribution(overrides?: CallOverrides): Promise<BigNumber>;

    nextContributionDue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawExcess(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monthlyContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextContributionDue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExcess(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
